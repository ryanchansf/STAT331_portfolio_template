---
title: "STAT 331 Portfolio"
author: "Ryan Chan"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv

# Source: Lab 2, Question 1
surveys = read_csv(here::here("data", "surveys.csv"),
                   show_col_types = FALSE)

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

# Source: Practice Activity 4
military <- read_xlsx(here::here("data",
                                 "gov_spending_per_capita.xlsx"),
                      sheet = "Share of Govt. spending",
                      skip = 7,
                      n_max = 191)

```

-   `txt`

```{r}
#| label: wd-1-txt

# Source: Check-in 2.3
ages_tab <- read_table(file = here::here("Week 2",
                                         "Check-ins",
                                         "Ages_Data",
                                         "ages_tab.txt"))

```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2

# Source: Challenge 3, Question 1
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(
    SET_level = ifelse(SET_score_avg >= 4,
                       "excellent", 
                       "standard"),
    sen_level = ifelse(seniority <= 4, 
                       "junior", 
                       "senior")
  ) |>
  select(
    course_id,
    SET_level,
    sen_level
)

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric

# Source: Lab 3, Question 9
teacher_evals_clean |>
  group_by(course_id, teacher_id) |>
  summarise(question_count = n_distinct(question_no)) |>
  filter(question_count == 9)

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Source: Lab 5, Finding Suspect
person |>
  inner_join(get_fit_now_member |>
               rename(membership_id = id),
             join_by(id == person_id)) |>
  left_join(get_fit_now_check_in,
            join_by(membership_id == membership_id)) |>
  left_join(drivers_license,
            join_by(license_id == id)) |>
  filter(ymd(check_in_date) == ymd(20180109),
         gender == "male",
         membership_status == "gold",
         str_detect(membership_id, "^48Z"),
         str_detect(plate_number, "H42W"))

```

-   factor

```{r}
#| label: wd-3-factor

# Source: Lab 4, Question 2
ca_childcare <- counties |>
  inner_join(childcare_costs,
             by = join_by(county_fips_code)) |>
  filter(state_name == "California")

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# modify: I would recommend first renaming the id column of the person data **and then** piping into inner_join(). It is hard to understand what data are being joined when you are nesting functions inside of functions.

# Lab 5, Step 5
person |>
  inner_join(drivers_license,
             join_by(license_id == id)) |>
  inner_join(facebook_event_checkin,
             join_by(id == person_id)) |>
  filter(gender == "female",
         hair_color == "red",
         height %in% c(65:67),
         car_make == "Tesla",
         car_model == "Model S",
         event_name == "SQL Symphony Concert",
         month(ymd(date)) == 12,
         year(ymd(date)) == 2017) |>
  group_by(id) |>
  summarize(concert_attendance = n()) |>
  filter(concert_attendance == 3)

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

# Source: Lab 4, Question 3
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         region = fct_collapse(county_name,
                               "Superior California" = c("Butte", "Colusa", "El Dorado", "Glenn", "Lassen", "Modoc", "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", "Tehama", "Yolo", "Yuba"),
                               "North Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"),
                               "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"),
                               "Northern San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"),
                               "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
                               "Southern San Joaquin Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"),
                               "Inland Empire" = c("Riverside", "San Bernardino"),
                               "Los Angeles County" = c("Los Angeles"),
                               "Orange County" = c("Orange"),
                               "San Diego-Imperial" = c("San Diego", "Imperial")))

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

# Source: Lab 4, Question 3
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         region = fct_collapse(county_name,
                               "Superior California" = c("Butte", "Colusa", "El Dorado", "Glenn", "Lassen", "Modoc", "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", "Tehama", "Yolo", "Yuba"),
                               "North Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"),
                               "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"),
                               "Northern San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"),
                               "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
                               "Southern San Joaquin Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"),
                               "Inland Empire" = c("Riverside", "San Bernardino"),
                               "Los Angeles County" = c("Los Angeles"),
                               "Orange County" = c("Orange"),
                               "San Diego-Imperial" = c("San Diego", "Imperial")))
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

# use same as above for WD-3 - date, make the inner_join a mutate()

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

# Source: Lab 5, Step 6
person |>
  left_join(interview,
            join_by(id == person_id)) |>
  filter(id == 99716) |>
  select(name,
         transcript)

```

-   `right_join()`

```{r}
#| label: wd-5-right

```

-   `inner_join()`

```{r}
#| label: wd-5-inner

# Source: Lab 5, Step 4
person |>
  inner_join(interview,
             join_by(id == person_id)) |>
  filter(id == 67318) |>
  pull(transcript)

```

-   `full_join()`

```{r}
#| label: wd-5-full

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# Source: Lab 4, Question 6
ca_childcare |>
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "weekly_price") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool")),
         region = factor(region,
                         levels = region_order)) |>
  # create the plot
  ggplot(mapping = aes(x = study_year,
                       y = weekly_price,
                       color = region)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess") +
  facet_wrap(~ age_group) +
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  theme(legend.position = "right",
        strip.background = element_rect(color = "black"),
        panel.border = element_rect(color = "black",
                                    fill = NA), # black border around each plot
        aspect.ratio = 1.1,
        axis.text = element_text(size = 6)
  )

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# Source: Lab 4, Question 4
ca_childcare |>
  group_by(region, study_year) |>
  filter(study_year %in% c(2008, 2018)) |>
  summarize(median_mhi = median(mhi_2018,
                                na.rm = TRUE)) |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi) |>
  arrange(desc(`2018`))

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Source: Lab 2, Question 16
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)
       ) +
  geom_jitter(color = "steelblue",
              alpha = 0.5,
              show.legend = FALSE) +
  geom_boxplot(outliers = FALSE) +
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 1)) +
  labs(
    x = "Species",
    y = "",
    subtitle = "Weight (g)",
    title = "Weight Distribution Across Rodent Species from Portal, Arizona"
  )

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

# Source: Challenge 3, Question 1
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(SET_level = ifelse(SET_score_avg >= 4,
                       "excellent", 
                       "standard"),
         sen_level = ifelse(seniority <= 4, 
                       "junior", 
                       "senior")
  ) |>
  select(
    course_id,
    SET_level,
    sen_level
  )

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

# Source: Lab 2, Question 4
ggplot(data = surveys) +
  geom_point(mapping = aes(x = weight,
                           y = hindfoot_length),
             position = "jitter",
             alpha = 0.5
  ) +
  facet_wrap(~species) +
  labs(x = "Weight (g)",
       y = "",
       title = "Relationship between Weight and Hindfoot Length in Species from Portal, AZ",
       subtitle = "Hindfoot Length (mm)",
  )

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Source: Lab 2, Question 16
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)
       ) +
  geom_jitter(color = "steelblue",
              alpha = 0.5,
              show.legend = FALSE) +
  geom_boxplot(outliers = FALSE) +
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 1)) +
  labs(
    x = "Species",
    y = "",
    subtitle = "Weight (g)",
    title = "Weight Distribution Across Rodent Species from Portal, Arizona"
  )

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

# N/A

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

# Source: Lab 2, Question 16
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)
       ) +
  geom_jitter(color = "steelblue",
              alpha = 0.5,
              show.legend = FALSE) +
  geom_boxplot(outliers = FALSE) +
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 1)) +
  labs(
    x = "Species",
    y = "",
    subtitle = "Weight (g)",
    title = "Weight Distribution Across Rodent Species from Portal, Arizona"
  )

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3

# Source: Lab 4, Question 6
# specify exact region order in legend
region_order <- c("San Francisco Bay Area",
                  "Orange County",
                  "Los Angeles County",
                  "Northern San Joaquin Valley",
                  "Central Coast",
                  "Inland Empire",
                  "Superior California",
                  "Southern San Joaquin Valley",
                  "San Diego-Imperial",
                  "North Coast")

# data cleaning before piping into the plot
ca_childcare |>
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "weekly_price") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool")),
         region = factor(region,
                         levels = region_order)) |>
  # create the plot
  ggplot(mapping = aes(x = study_year,
                       y = weekly_price,
                       color = region)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess") +
  facet_wrap(~ age_group) +
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  theme(legend.position = "right",
        strip.background = element_rect(color = "black"),
        panel.border = element_rect(color = "black",
                                    fill = NA), # black border around each plot
        aspect.ratio = 1.1,
        axis.text = element_text(size = 6)
  )

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1

# Source: Challenge 3, Question 2
ggplot(data = teacher_evals_compare,
       mapping = aes(x = sen_level,
                     fill = SET_level)
       ) +
  geom_bar(position = "stack") +
  labs(
    x = "Seniority of Instructor",
    y = "",
    subtitle = "Number of Sections"
  ) +
  scale_fill_manual(
    values = c("steelblue", "orange3")
  )

```

-   I can use annotations

```{r}
#| label: dvs-3-2

```

-   I can be creative...

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

# Source: Lab 4, Question 4
ca_childcare |>
  group_by(region, study_year) |>
  filter(study_year %in% c(2008, 2018)) |>
  summarize(median_mhi = median(mhi_2018,
                                na.rm = TRUE)) |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi) |>
  arrange(desc(`2018`))

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

# Source: Lab 3, Question 6
# create new df with counts for each
num_instructors <- teacher_evals_clean |>
  summarise(unique_instructors = n_distinct(teacher_id),
            unique_courses = n_distinct(course_id),
            unique_combos = n_distinct(teacher_id, course_id))

num_instructors

```

-   Example 2

```{r}
#| label: dvs-6-2

# Source: Lab 3, Question 8
teacher_evals_clean |>
  group_by(academic_degree, sex) |>
  summarise(
    avg_seniority = mean(seniority),
    total_instructors = n_distinct(teacher_id)
  )

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

# Source: Lab 3, Question 8
teacher_evals_clean |>
  group_by(academic_degree, sex) |>
  summarise(
    avg_seniority = mean(seniority),
    total_instructors = n_distinct(teacher_id)
  )

```

-   Example 2

```{r}
#| label: dvs-7-2

# Source: Lab 3, Question 11
teacher_evals_clean |>
  group_by(teacher_id) |>
  filter(seniority == 1) |>
  summarise(avg_failing = mean(percent_failed_cur)) |>
  filter(avg_failing == max(avg_failing) | avg_failing == min(avg_failing))

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

# Source: Lab 5, Step 1
crime_scene_report |>
  filter(city == "SQL City",
         ymd(date) == ymd(20180115),
         type == "murder") |>
  pull(description)

```

-   `across()`

```{r}
#| label: pe-1-across

# N/A

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

# N/A

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

# N/A

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

# N/A

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

# N/A

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

# N/A

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

# N/A

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

# Source: Lab 4, Question 6
# data cleaning before piping into the plot
ca_childcare |>
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "weekly_price") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool")),
         region = factor(region,
                         levels = region_order)) |>
  # create the plot
  ggplot(mapping = aes(x = study_year,
                       y = weekly_price,
                       color = region)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess") +
  facet_wrap(~ age_group) +
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  theme(legend.position = "right",
        strip.background = element_rect(color = "black"),
        panel.border = element_rect(color = "black",
                                    fill = NA), # black border around each plot
        aspect.ratio = 1.1,
        axis.text = element_text(size = 6)
  )

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

# N/A

```

-   Example 2

```{r}
#| label: dsm-1-2

# N/A

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

# Source: Challenge 3, Question 3
# contingency table between SET_level and sen_level for chi-squared test
cont_table <- table(
  teacher_evals_compare$SET_level,
  teacher_evals_compare$sen_level
)

chisq.test(cont_table)

# Since the p-value = 0.001997, which is less than 0.05, we reject the null hypothesis. Thus, we conclude that there is a significant association between the SET_level, or the evaluation level, and the sen_level, or seniority level, and that the SET_level is not independent of the seniority level of the instructors. This means that seniority is likely a significant factor in the evaluation scores for instructors.

```

-   Example 2

```{r}
#| label: dsm-2-2

# Source: Lab 2, Question 17
# ANOVA test
species_mod <- aov(weight ~ species, 
                   data = surveys)

summary(species_mod)

# Since the p-value is significantly less than 0.05, we reject the null hypothesis that the population mean weight is the same between all fourteen rodent species. Thus, there is strong evidence to suggest that at least one rodent species has a different population mean weight in comparison to the others.

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
